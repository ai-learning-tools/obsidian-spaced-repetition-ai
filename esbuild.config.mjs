import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import postcssPlugin from "esbuild-postcss";
import tailwindcss from "tailwindcss";
import autoprefixer from "autoprefixer";

// Banner text to be added at the top of the generated/bundled file
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// Check if the build is for production
const prod = process.argv[2] === "production";

// Create esbuild context for JavaScript
const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"], // Entry point for the application
	bundle: true, // Bundle all dependencies into a single file
	plugins: [
		postcssPlugin({
			plugins: [tailwindcss, autoprefixer], // PostCSS plugins
		}),
	],
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins, // Built-in Node.js modules
	],
	format: "cjs", // Output format
	target: "es2018", // JavaScript target version
	logLevel: "info", // Log level
	sourcemap: prod ? false : "inline", // Source map configuration
	treeShaking: true, // Enable tree shaking
	outfile: "main.js", // Output file
	allowOverwrite: true, // Allow overwriting the output file
});

// Create esbuild context for CSS, 
// Obsidan reads from styles.css but esbuild writes to main.css
// We watch main.css and copy any changes to styles.css
const cssContext = await esbuild.context({
	entryPoints: ["main.css"], // Entry point for the CSS
	bundle: true, // Bundle all dependencies into a single file
	outfile: "styles.css", // Output file
	allowOverwrite: true, // Allow overwriting the output file
});

// Rebuild or watch based on the environment
if (prod) {
	await context.rebuild(); // Rebuild for production
	await cssContext.rebuild(); // Rebuild CSS for production
	process.exit(0); // Exit the process
} else {
	await context.watch(); // Watch for changes in development
	await cssContext.watch(); // Watch for changes in CSS in development
}
